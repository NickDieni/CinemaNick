// <auto-generated />
using System;
using CinemaDataModels.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaDataModels.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20241126082145_ChangedStuff")]
    partial class ChangedStuff
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShowtimeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.PostalCode", b =>
                {
                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<string>("PostalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TheaterId")
                        .HasColumnType("int");

                    b.HasKey("PostalCodeId");

                    b.HasIndex("TheaterId");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("TicketId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Showtime", b =>
                {
                    b.Property<int>("ShowtimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowtimeId"));

                    b.Property<DateTime>("ShowtimeStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("ShowtimeId");

                    b.HasIndex("TicketId");

                    b.ToTable("Showtimes");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Theater", b =>
                {
                    b.Property<int>("TheaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheaterId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowtimeId")
                        .HasColumnType("int");

                    b.Property<string>("TheaterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TheaterId");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("TicketId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Genre", b =>
                {
                    b.HasOne("CinemaDataModels.Models.Entities.Movie", null)
                        .WithMany("GenreId")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Movie", b =>
                {
                    b.HasOne("CinemaDataModels.Models.Entities.Showtime", null)
                        .WithMany("MovieId")
                        .HasForeignKey("ShowtimeId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.PostalCode", b =>
                {
                    b.HasOne("CinemaDataModels.Models.Entities.Theater", null)
                        .WithMany("PostalCodeId")
                        .HasForeignKey("TheaterId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Seat", b =>
                {
                    b.HasOne("CinemaDataModels.Models.Entities.Ticket", null)
                        .WithMany("SeatId")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Showtime", b =>
                {
                    b.HasOne("CinemaDataModels.Models.Entities.Ticket", null)
                        .WithMany("ShowtimeId")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Theater", b =>
                {
                    b.HasOne("CinemaDataModels.Models.Entities.Seat", null)
                        .WithMany("TheaterId")
                        .HasForeignKey("SeatId");

                    b.HasOne("CinemaDataModels.Models.Entities.Showtime", null)
                        .WithMany("TheaterId")
                        .HasForeignKey("ShowtimeId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.User", b =>
                {
                    b.HasOne("CinemaDataModels.Models.Entities.PostalCode", "PostalCode")
                        .WithMany()
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaDataModels.Models.Entities.Ticket", null)
                        .WithMany("UserId")
                        .HasForeignKey("TicketId");

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Movie", b =>
                {
                    b.Navigation("GenreId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Seat", b =>
                {
                    b.Navigation("TheaterId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Showtime", b =>
                {
                    b.Navigation("MovieId");

                    b.Navigation("TheaterId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Theater", b =>
                {
                    b.Navigation("PostalCodeId");
                });

            modelBuilder.Entity("CinemaDataModels.Models.Entities.Ticket", b =>
                {
                    b.Navigation("SeatId");

                    b.Navigation("ShowtimeId");

                    b.Navigation("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
